#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Created on Fri Dec 13 16:21:09 2013

@author: Alexander Bikadorov, Marcelo Millani

Dependencies:
- TMalign needs to be in PATH
- paratmalign needs to be in PATH
- blastp needs to be in PATH
- abinitio needs to be in PATH (a link to the compbio_app.* executable)
- grep needs to be in PATH
- head needs to be in PATH

"""

import sys
import logging
import argparse
import os
import subprocess
import itertools

import _myutils

DEVNULL = open(os.devnull, "w")
TMALIGN_SEPARATOR = "# SEPARATOR #"

NUM_DECOYS = 20 # number of decoys generated by rosetta
NUM_USED_DECOYS = 5 # number of decoys used for database lookup 
NUM_STRUC_MODELS = 100 # number of models selected by structure comparison per decoy
NUM_CONSTR_MODELS = 1 # number of models used for constraint extraction per iteration
WEIGHT_STRUC = 1
WEIGHT_SEQ = 0.01
D = 1 # lower bound distance in angstrom for constraint extraction
SD = '0.2' # scaling value for constraint distance
PROCESSES = 16 # number of parallel TMAlign executions

def _arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("target_pdb_file", type=str, help="Target pdb file")
    parser.add_argument("pdb_dir", type=str, help="Path to structure database (directory with pdb files)")
    parser.add_argument("fasta_dir", type=str, help="Path to sequence database (directory with fasta files)")
    parser.add_argument("rosetta_database", type=str, help="Path to the database which will be use by Rosetta's abinitio")
    return parser.parse_args()

def _read_scorefile(target_base_dir):
    # load score file input
    score_file_str = os.path.join(target_base_dir, 'models', 'score.fsc')
    lines_list = _myutils.read_file_lines(score_file_str)
    
    # create list of lists with all fields
    field_list = [str_.split() for str_ in lines_list]
    # filter irrelevant lines
    field_list = [l for l in field_list if l[0] == "SCORE:"] 
    # create list of dictionaries (with keys from first line in file)
    field_dict_list = [dict(zip(field_list[0], l)) for l in field_list[1:]]
    
    # sort list
    field_dict_list.sort(key=lambda d: float(d["score"])) # smaller score better
    
    print('scores:')
    print('score gdtmm_full description')
    for d in field_dict_list:
        print(d["score"], d["gdtmm_full"], d["description"])
        
    return field_dict_list

def _run(args, shell=False, stderr=None):
    return subprocess.check_output(args, shell=shell, stderr=stderr).rstrip().decode("utf-8")

def _run_para_tmalign(target_pdb,templates_pdbs):
    scoreParser = r"grep ^TM-score | grep [0-9]*\\.[0-9]* -o | head -n 1"
    args = ["paratmalign.sh %d '%s' '%s' %s"%(PROCESSES,target_pdb, TMALIGN_SEPARATOR ,"'"+"' '".join(templates_pdbs) + "'")]
    all_ = _run(args, shell=True, stderr=DEVNULL)
    # As there is an separator after every execution, the last element will be empty
    executions = all_.split(TMALIGN_SEPARATOR)

    scores = []
    # gets the score of each execution
    for i in range(0,len(executions)-1,2):
        e = executions[i]
        name = os.path.basename(executions[i+1]).rstrip()
        try:
            parsit = ["echo \"%s\" | %s"%(e,scoreParser)]            
            score = _run(parsit, shell=True)
            scores.append((name,float(score)))
        except:
            pass
    
    return scores

def _para_tmalign(model_pdb_file, pdb_dir):
    print('running paraTMAlign for '+model_pdb_file+'...')    
    scores = []
    CHUNK_SIZE = 100*PROCESSES
    files = _myutils.files_in_dir(pdb_dir, '*.pdb') + _myutils.files_in_dir(pdb_dir, '*.ent')
    # run tmalign for each template in database
    for chunk in _myutils.group_it(files, CHUNK_SIZE):
        scores += _run_para_tmalign(model_pdb_file, chunk)
        print("%d/%d" % (len(scores), len(files)))
    
    scores.sort(key=lambda t: t[1], reverse=True) # higher score better
    print("Scores.len = %d"%(len(scores)))
    return scores

#BLAST_OUTP = '10 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore qseq sseq'
BLAST_OUTP = ["10 bitscore score"]
def _run_blast(target_fasta_file, model_fasta_file):
    args = ['blastp', '-query', target_fasta_file, '-subject', model_fasta_file, '-outfmt'] + BLAST_OUTP
    out = _run(args)
    return float(out.split(',')[0]) if len(out) else 0

def _residue_indices(res_list, bound_list):
    it = itertools.count(1)
    return [a for a, x in zip((next(it) if a != '-' else None for a in res_list), bound_list) if x == ':']
    
def _run_tmalign_constr(target_pdb_file, template_pdb_file, d):
    """Run TMalign to get distance constraints between atom pairs.
       A list of tuples is returned containing the indices for amino acid pairs.
       d: minimum distance in angstrom.
    """
    args = ["TMalign "+target_pdb_file+" "+template_pdb_file+" -d "+str(d)+" | tail -n 4"]
    outp_lines = _run(args, shell=True).splitlines()
    return list(zip(_residue_indices(outp_lines[0], outp_lines[1]), _residue_indices(outp_lines[2], outp_lines[1])))

def main(argv=sys.argv):
    logging.getLogger().setLevel(logging.INFO)
    
    args = _arguments()
    target_pdb_path = os.path.abspath(args.target_pdb_file)
    target_base_dir = os.path.join(*_myutils.split_path(target_pdb_path)[:-2])
    pdb_dir = os.path.abspath(args.pdb_dir)
    fasta_dir = os.path.abspath(args.fasta_dir)
    rosetta_database = os.path.abspath(args.rosetta_database)
        
    # step 1: run compbio_app
    cur_dir = os.getcwd()
    os.chdir(target_base_dir)
    abinitio = ["abinitio","@flags","-database",rosetta_database,"--nstruct "+str(NUM_DECOYS)]
    print("Running abinitio:\n%s"%(" ".join(abinitio)))    
    subprocess.call(abinitio, stdout=DEVNULL, stderr=DEVNULL)
    os.chdir(cur_dir)
    print("done with abinitio")
    
    # step 2: read scorefile 
    field_dict_list = _read_scorefile(target_base_dir)

    # step 3: find template scores for decoys  
    scores = []        
    target_fasta_file = os.path.splitext(target_pdb_path)[0]+'.fasta'
    for decoy_dict in field_dict_list[:NUM_USED_DECOYS]:
        print('processed decoy: '+decoy_dict['description'])
        
        # step 3.1: get structure scores with tmalign
        decoy_pdb_file = os.path.join(target_base_dir, 'models', decoy_dict['description'] + '.pdb')
        struc_scores = _para_tmalign(decoy_pdb_file, pdb_dir)
    
        #output_file_str = os.path.splitext(decoy_pdb_file)[0]+'_tmalign_scores.txt'
        #_myutils.write_file(output_file_str , '\n'.join(' '.join(str(t)) for t in struc_scores))    
    
        struc_scores = struc_scores[:NUM_STRUC_MODELS]
        
        # step 3.2: get sequence scores
        for model_pdb_file, struc_score in struc_scores:
            model_fasta_file = os.path.join(fasta_dir, model_pdb_file.rstrip('.pdb') + '.fasta')
            seq_score = _run_blast(target_fasta_file, model_fasta_file)
            scores.append((decoy_dict['description'], model_pdb_file, struc_score, seq_score, WEIGHT_STRUC * struc_score + WEIGHT_SEQ * seq_score))
    
    scores.sort(key=lambda t: t[4], reverse=True)
        
    print('scores :')
    print('\n'.join(str(t) for t in scores))    

    # step 5: get constraints from selected models
    constr_models = scores[:NUM_CONSTR_MODELS]
    res_pairs = []
    for decoy, model_file, strs, seqs, fs in constr_models:
        model_pdb_path = os.path.join(pdb_dir, model_file)
        res_pairs += _run_tmalign_constr(target_pdb_path, model_pdb_path, D)
    
    # remove inconsistent pairs
    res_pairs = _myutils.remove_dups(res_pairs, comp_item_index=0)
    res_pairs = _myutils.remove_dups(res_pairs, comp_item_index=1)
    
    # save constraint file
    # AtomPair: Atom1_Name Atom1_ResNum Atom2_Name Atom2_ResNum Func_Type Func_Def
    # AtomPair SG 5 V1 32 HARMONIC 0.0 0.2
    ros_constr = ['AtomPair CA '+str(n1)+' CA '+str(n2)+' HARMONIC 0.0 '+SD for n1, n2 in res_pairs]
    constr_file_path = os.path.join(target_base_dir,'inputs', 'ros_constraints.txt')
    _myutils.write_file(constr_file_path, '\n'.join(ros_constr) + '\n')
    
    # step 6: runs abinitio with the constraints
    
    os.chdir(target_base_dir)
    abinitio = ["abinitio","@flags","-database",rosetta_database,"-constraints:cst_file %s"%(constr_file_path),"--nstruct 10"]
    print("Running abinitio:\n%s"%(" ".join(abinitio)))
    subprocess.call(abinitio, stdout=DEVNULL, stderr=DEVNULL)
    os.chdir(cur_dir)
    print("done with abinitio")
    
    DEVNULL.close()
    print("DONE!")

if __name__ == "__main__":
    sys.exit(main())
